function [dprime, criterion, d_a, c_a] = kt_dprime(nh,nfa,nsignal,nnoise,loglinear,s,mu_s)
% [dprime, criterion, d_a, c_a] = kt_dprime(nh,nfa,nsignal,nnoise,loglinear,s,mu_s)
%
% Calculates signal detection theory measures, with required inputs: 
% nh = number of hit trials
% nfa = number of false alarm trials
% nsignal = number of signal trials
% nnoise = number of noise trials
% 
% If desire correcting for cells with 0 or full counts (which will return NaN or Inf measures), 
% set loglinear to 1. Defaults to no correction. 
% 
% If unequal variance, and desire calculating d_a and c_a (,
% additional inputs are required:  
% s (slope)
% mu_s (mean) 
% See 

%% Check inputs
if nargin<5 
    loglinear = 0; 
end
if nargin>5
    uv = 1; 
else
    uv = 0;
end

%% 
% adjust for ceiling or floor values
% nh(nh==nsignal) = nsignal(nh==nsignal)-1;
% nh(nh==0) = 1;
% nfa(nfa==nnoise) = nnoise(nfa==nnoise)-1;
% nfa(nfa==0) = 1;

% proportions
h = nh./nsignal;
fa = nfa./nnoise;

% % loglinear adjustment (Stanislaw & Todorov 1999) 
if loglinear
    if h==0 || h==1 || fa==0 || fa==1
        nh = nh + 0.5;
        nfa = nfa + 0.5;
        nnoise = nnoise + 1;
        nsignal = nsignal + 1;
    end
end

% recalculate proportions
h = nh./nsignal;
fa = nfa./nnoise;

% adjustment = 0.01; 
% % adjust for ceiling or floor values 
% if h==1
%     h = 1-adjustment; 
% end
% if fa==1
%     fa = adjustment; 
% end 
% 
% if h==0
%     h = adjustment; 
% end
% if fa==0
%     h = 1-adjustment; 
% end

% dprime
zh = norminv(h,0,1); zfa = norminv(fa,0,1);

%% Vanilla SDT 
dprime = zh - zfa;
criterion = -0.5*(zh+zfa);

%% Unequal variance SDT 
if uv
    d_a = sqrt(2/(1+s^2)) * (zh - s*zfa); 
    c_a = - (sqrt(2)*s / (sqrt(1+s^2)*(1+s)) ) * (zh + zfa); 
else
    d_a = NaN;
    c_a = NaN; 
end
